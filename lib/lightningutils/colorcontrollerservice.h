#pragma once
#include <stdint.h>
#include <memory>
#include <functional>
#include <filter.h>
#include <basicfilters.h>
#include <effect.h>
#include <hsb.h>

class ColorControllerService final {
    public:
        typedef std::function<void(const HSB& hsb)> UpdateFunction;

    private:
        UpdateFunction m_updateFunction;

        // Filter to control overall brightness
        std::unique_ptr<BrightnessFilter> m_brightnessFilter;
        std::unique_ptr<PowerFilter> m_powerFilter;

        // Holds the current working HSB color
        HSB m_setHsb;

        // HoldÂ´s the color of the last color generated by the filters
        HSB m_currentHsb;

        // Pointers to current effect and filter
        std::unique_ptr<Effect> m_currentEffect;
        std::unique_ptr<Filter> m_currentFilter;

    public:
        ColorControllerService(const HSB & hsb, UpdateFunction p_updateFunction);
        void handle(uint32_t transitionCounter);

        void filter(std::unique_ptr<Filter> p_filter);
        void effect(std::unique_ptr<Effect> p_effect);

        void power(bool onoff);
        void hsb(const HSB& hsb);
        const HSB hsb() const;
        const HSB currentHsb() const;
};
